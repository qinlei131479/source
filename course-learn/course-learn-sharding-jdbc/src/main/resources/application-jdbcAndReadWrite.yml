#配置解析
#   模拟四台服务器
#     两台主数据库 端口为 3307/3317 从数据库端口为 3308/3318
#     binlog 数据同步方向 3307 --->3308  3317--->3318
#   配置写数据库
#     ds-master0,ds-master1,ds-master2,ds-master3   4个库
#     ds-master0,ds-master1 对应为端口3307 服务器上的数据库
#     ds-master2,ds-master3 为端口3317服务器上的数据库
#   配置读数据库
#     ds-slave0,ds-slave1,ds-slave2,ds-slave3   4个库
#     ds-slave0,ds-slave1 对应为端口3308 服务器上的数据库
#     ds-slave2,ds-slave3 为端口3318服务器上的数据库
#   主库和从库的库名一次对应
# 实现分库分表 + 读写分离
spring:
  shardingsphere:
    # 配置数据库4主4从
    datasource:
      names: ds-master0,ds-slave0,ds-master1,ds-slave1,ds-master2,ds-slave2,ds-master3,ds-slave3
      ds-master0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url:  jdbc:mysql://139.186.153.56:3306/ds-master-0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password:  qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-slave0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://139.186.161.146:3306/ds-master-0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-master1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url:  jdbc:mysql://139.186.153.56:3306/ds-master-1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password:  qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://139.186.161.146:3306/ds-master-1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-master2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url:  jdbc:mysql://139.186.153.56:3306/ds-master-2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password:  qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://139.186.161.146:3306/ds-master-2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-master3:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url:  jdbc:mysql://139.186.153.56:3306/ds-master-3?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password:  qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效
      ds-slave3:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://139.186.161.146:3306/ds-master-3?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: qinlei131479@QQ!!
        initial-size: 4 # 初始化时建立物理连接的个数
        min-idle: 1   # 最小连接池数量
        max-active: 40 #  最大连接数量
        query-timeout: 60000 #查询超时
        filters: stat,config # stat表示sql合并
        testOnBorrow: false  # 申请连接时执行validationQuery检测连接是否有效

    sharding:
      tables:
        # user表分库不分表
        user:
          # 主键分配策略
          key-generator-column-name: id
          key-generator:
            type: SNOWFLAKE
            column: id
          #数据节点 注意 只分库不分表
          actual-data-nodes: ds-master$->{0..3}.user
          #分库策略
          database-strategy:
            inline:  #行表达式
              sharding-column: dept_id  #列名称，多个列以逗号分隔
              algorithm-expression: ds-master$->{dept_id % 4}  #按模运算分配
        department:
          # 主键分配策略
          key-generator-column-name: id
          key-generator:
            type: SNOWFLAKE
            column: id
          # 配置分库数据源(分库分表处理)
          actual-data-nodes: ds-master$->{0..3}.department_${0..3}  #数据节点 即分库也分表
          #分库策略
          database-strategy:
            inline:
              sharding-column: dept_id  #分库字段
              algorithm-expression: ds-master$->{dept_id % 4} # 多个库进行取模运算
          # 分表策略
          table-strategy:
            # inline 表达式配置分表
            inline:
              sharding-column: id  #分表字段
              algorithm-expression: department_$->{id % 4}  # 多张表进行取模运算

      # 配置关联表，减少笛卡尔积
      binding-tables: user,department
      #广播规则表配置： 解释-- 每一条数据都会向每个数据源里面的改表进行同步的 crud操作，每个库里面的该表的数据是同步的
      # 此处添加的表明在 每个库里面都应该存在表，并且数据是同步的 ，一般多表用于关联查询时的解决方案
      broadcast-tables: t_config
      # 设置默认的数据库
      default-data-source-name: ds-master0
      # 设置默认的主键id生成策略
      default-key-generator:
        type: SNOWFLAKE
        column: id
      # 读写分离规则，每个主库对应从库
      master-slave-rules:
        ds-master0:
          master-data-source-name: ds-master0
          slaveDataSourceNames: ds-slave0
          loadBalanceAlgorithmType: ROUND_ROBIN
        ds-master1:
          master-data-source-name: ds-master1
          slaveDataSourceNames: ds-slave1
          loadBalanceAlgorithmType: ROUND_ROBIN
        ds-master2:
          master-data-source-name: ds-master2
          slaveDataSourceNames: ds-slave2
          loadBalanceAlgorithmType: ROUND_ROBIN
        ds-master3:
          master-data-source-name: ds-master3
          slaveDataSourceNames: ds-slave3
          loadBalanceAlgorithmType: ROUND_ROBIN

  props:
    sql.show: true  #   显示sql

